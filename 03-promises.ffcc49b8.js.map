{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,EAASC,YAAW,KACdP,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAdES,SAASC,cAAc,SAC/BC,iBAAiB,UAkBxB,SAAuBC,GACrBA,EAAEC,iBACFC,aAAaP,GAEb,IAAMP,MAAAe,EAAKC,KAAEA,EAAIC,OAAEA,GAAWL,EAAEM,OAAOC,SAEnCC,GADaC,OAAON,EAAMO,OACdD,OAAOL,EAAKM,QACVD,OAAOJ,EAAOK,OAEhC,GAAIP,EAAMO,MAAQ,GAAKN,EAAKM,MAAQ,GAAKL,EAAOK,MAAQ,EAEtD,YADA1B,EAAA2B,OAAOC,QAAQ,wCAGjB,IAAK,IAAIC,EAAI,EAAGA,GAAKR,EAAOK,MAAOG,GAAK,EACtC3B,EAAc2B,EAAGL,GACdM,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAOI,QAAQ,wBAAsB5B,QAAiBC,MAAU,IAEjE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IAEnEoB,GAAaC,OAAOL,EAAKM,OAE3BV,EAAEiB,cAAcC,O,IAxBlB,IAAIvB,EAAS","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onMakePromise);\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    timeId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nlet timeId = null;\nfunction onMakePromise(e){  \n  e.preventDefault();\n  clearTimeout(timeId);\n  \n  let { delay, step, amount } = e.target.elements;\n  let delayValue = Number(delay.value);\n  let stepValue = Number(step.value);\n  let amountValue = Number(amount.value);\n\n  if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n    Notify.failure(`All values must be greater than zero`);\n    return;\n  }\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, stepValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise #${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise #${position} in ${delay}ms`);\n      });\n    stepValue += Number(step.value);\n  }\n  e.currentTarget.reset();\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$timeId","setTimeout","document","querySelector","addEventListener","e","preventDefault","clearTimeout","delay1","step","amount","target","elements","stepValue","Number","value","Notify","failure","i","then","success","catch","currentTarget","reset"],"version":3,"file":"03-promises.ffcc49b8.js.map"}