{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,EAASC,YAAW,WACdP,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAdQS,SAASC,cAAc,SAC/BC,iBAAiB,UAkBxB,SAAuBC,GACrBA,EAAEC,iBACFC,aAAaP,GAEb,IAA8BQ,EAAAH,EAAEI,OAAOC,SAAjCC,EAAwBH,EAAxBf,MAAOmB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACfC,EAAaC,OAAOJ,EAAMK,OACdD,OAAOH,EAAKI,OACVD,OAAOF,EAAOG,OAEhC,GAAIL,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EAEtD,YADA3B,EAAA4B,OAAOC,QAAS,wCAGlB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOG,MAAOG,GAAK,EACtC5B,EAAc4B,EAAGL,GACdM,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBJ,EAAA4B,OAAOK,QAAQ,wBAAyCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE/D+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBJ,EAAA4B,OAAOC,QAAQ,uBAAwCK,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE/DqB,GAAcC,OAAOH,EAAKI,OAE9BX,EAAEoB,cAAcC,O,IAxBlB,IAAI1B,EAAS,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onMakePromise);\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    timeId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nlet timeId = null;\nfunction onMakePromise(e){  \n  e.preventDefault();\n  clearTimeout(timeId);\n  \n  let { delay, step, amount } = e.target.elements;\n  let delayValue = Number(delay.value);\n  let stepValue = Number(step.value);\n  let amountValue = Number(amount.value);\n\n  if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n    Notify.failure(`All values must be greater than zero`);\n    return;\n  }\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise #${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise #${position} in ${delay}ms`);\n      });\n      delayValue += Number(step.value);\n  }\n  e.currentTarget.reset();\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$ce04d3a99e08e73b$var$timeId","setTimeout","document","querySelector","addEventListener","e","preventDefault","clearTimeout","_elements","target","elements","delay1","step","amount","delayValue","Number","value","Notify","failure","i","then","param","success","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.0fd4a962.js.map"}